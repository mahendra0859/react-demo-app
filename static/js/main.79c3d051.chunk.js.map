{"version":3,"sources":["components/UserList.tsx","components/AcivityModal.tsx","components/Loader.tsx","components/UserTable.tsx","components/CustomClock.tsx","components/CustomCalender.tsx","components/Pagination.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["UserList","useState","users","setUsers","activityPeriods","setActivityPeriods","show","setShow","pageNumber","setPageNumber","pageSize","useEffect","a","axios","get","response","data","indexOfLastUser","indexOfFirstUser","currentUsers","slice","length","handleShow","activities","className","usersPerPage","totalUsers","paginate","pageNo","handleClose","AcivityModal","Date","calenderValue","setCalenderValue","timeRangeIndex","setTimeRangeIndex","start_time","Modal","onHide","centered","Header","closeButton","Title","Body","onCalenderValueChange","value","forEach","activity","index","format","map","key","onClick","end_time","Footer","Button","variant","Loader","role","UserTable","Table","hover","bordered","striped","scope","user","id","activity_periods","real_name","tz","CustomClock","date","setDate","setInterval","CustomCalender","onChange","Pagination","pageNumbers","i","Math","ceil","push","number","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.79c3d051.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { AcivityModal, Loader, UserTable, Pagination } from \"./\";\nimport { ActivityPeriods, User } from \"../constants\";\n\nconst UserList = (): JSX.Element => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [activityPeriods, setActivityPeriods] = useState<ActivityPeriods[]>([]);\n  const [show, setShow] = useState<boolean>(false);\n  const [pageNumber, setPageNumber] = useState<number>(1);\n  const [pageSize] = useState<number>(10);\n  useEffect(() => {\n    (async () => {\n      const response = await axios.get(\n        \"https://raw.githubusercontent.com/mahendra0859/react-demo-app/master/src/db/new_users.json\"\n      );\n      setUsers(response.data);\n    })();\n  }, []);\n  const handleClose = (): void => setShow(false);\n  const handleShow = (activities: ActivityPeriods[]): void => {\n    setShow(true);\n    setActivityPeriods(activities);\n  };\n  const indexOfLastUser = pageNumber * pageSize,\n    indexOfFirstUser = indexOfLastUser - pageSize,\n    currentUsers = users.slice(indexOfFirstUser, indexOfLastUser),\n    paginate = (pageNo: number) => setPageNumber(pageNo);\n  return (\n    <>\n      {users.length ? (\n        <>\n          <UserTable users={currentUsers} handleShow={handleShow} />\n          <div className=\"d-flex align-items-center justify-content-center\">\n            <Pagination\n              pageNumber={pageNumber}\n              usersPerPage={pageSize}\n              totalUsers={users.length}\n              paginate={paginate}\n            />\n          </div>\n          {activityPeriods.length ? (\n            <AcivityModal\n              show={show}\n              handleClose={handleClose}\n              activityPeriods={activityPeriods}\n            />\n          ) : null}\n        </>\n      ) : (\n        <Loader />\n      )}\n    </>\n  );\n};\n\nexport default UserList;\n","import React, { useState, useEffect } from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport { format } from \"date-fns\";\nimport { ActivityPeriods } from \"../constants\";\nimport { CustomCalender } from \"./\";\n\ninterface AcivityModalProps {\n  show: boolean;\n  handleClose: () => void;\n  activityPeriods: ActivityPeriods[];\n}\n\nconst AcivityModal = ({\n  show,\n  handleClose,\n  activityPeriods,\n}: AcivityModalProps): JSX.Element => {\n  const [calenderValue, setCalenderValue] = useState<Date>(new Date());\n  const [timeRangeIndex, setTimeRangeIndex] = useState<number | null>(0);\n  useEffect(() => {\n    setCalenderValue(new Date(activityPeriods[0].start_time));\n  }, [activityPeriods]);\n  return (\n    <Modal\n      show={show}\n      onHide={() => {\n        handleClose();\n        setTimeRangeIndex(0);\n      }}\n      centered\n    >\n      <Modal.Header closeButton>\n        <Modal.Title>\n          <span className=\"text-danger\">User activity</span>\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <div className=\"d-flex flex-column align-items-center justify-content-center\">\n          {activityPeriods.length ? (\n            <>\n              <CustomCalender\n                calenderValue={calenderValue}\n                onCalenderValueChange={(value: any) => {\n                  setCalenderValue(value);\n                  activityPeriods.forEach(\n                    (activity: ActivityPeriods, index: number) => {\n                      if (\n                        format(new Date(activity.start_time), \"P\") ===\n                        format(new Date(value), \"P\")\n                      ) {\n                        setTimeRangeIndex(index);\n                      } else setTimeRangeIndex(null);\n                    }\n                  );\n                }}\n              />\n              <h4 className=\"my-3\">Activity Dates</h4>\n            </>\n          ) : null}\n          {activityPeriods.map((activity: ActivityPeriods, index: number) => (\n            <div\n              key={`activity-${index}`}\n              className=\"my-2 cursor-pointer\"\n              onClick={() => {\n                setCalenderValue(new Date(activity.start_time));\n                setTimeRangeIndex(index);\n              }}\n            >\n              <span>\n                <b>{format(new Date(activity.start_time), \"PPPP\")} :- </b>\n                {index === timeRangeIndex ? (\n                  <span className=\"text-success\">\n                    {format(new Date(activity.start_time), \"p\")}{\" \"}\n                    <b className=\"mx-2\">-</b>\n                    {format(new Date(activity.end_time), \"p\")}\n                  </span>\n                ) : (\n                  <b className=\"text-warning\">Click here!!!</b>\n                )}\n              </span>\n              <br />\n              <hr />\n            </div>\n          ))}\n          {timeRangeIndex === null && (\n            <div className=\"my-3\">\n              <h4 className=\"text-danger\">No activity found on !!!</h4>\n              <h5 className=\"text-muted\">\n                {format(new Date(calenderValue), \"PPPP\")}\n              </h5>\n            </div>\n          )}\n        </div>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button\n          variant=\"primary\"\n          onClick={() => {\n            handleClose();\n            setTimeRangeIndex(0);\n          }}\n        >\n          Ok\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n};\nexport default AcivityModal;\n","import React from \"react\";\n\nconst Loader = (): JSX.Element => (\n  <div className=\"d-flex justify-content-center\">\n    <div className=\"spinner-border\" role=\"status\">\n      <span className=\"sr-only\">Loading...</span>\n    </div>\n  </div>\n);\n\nexport default Loader;\n","import React from \"react\";\nimport { Table } from \"react-bootstrap\";\nimport { User, ActivityPeriods } from \"../constants\";\n\ninterface UserTableProps {\n  users: User[];\n  handleShow: (activities: ActivityPeriods[]) => void;\n}\n\nconst UserTable = ({ users, handleShow }: UserTableProps): JSX.Element => (\n  <Table hover bordered striped>\n    <thead>\n      <tr>\n        <th scope=\"col\" className=\"text-primary\">\n          #\n        </th>\n        <th scope=\"col\" className=\"text-primary\">\n          Name\n        </th>\n        <th scope=\"col\" className=\"text-primary\">\n          Time Zone\n        </th>\n      </tr>\n    </thead>\n    <tbody>\n      {users.map((user: User) => (\n        <tr\n          key={`${user.id}`}\n          className=\"cursor-pointer\"\n          onClick={() => handleShow(user.activity_periods)}\n        >\n          <th scope=\"row\" className=\"text-info\">\n            {user.id}\n          </th>\n          <td>{user.real_name}</td>\n          <td>{user.tz}</td>\n        </tr>\n      ))}\n    </tbody>\n  </Table>\n);\n\nexport default UserTable;\n","import React, { useState, useEffect } from \"react\";\nimport Clock from \"react-clock\";\n\nconst CustomClock = (): JSX.Element => {\n  const [date, setDate] = useState(new Date());\n  useEffect(() => {\n    setInterval(() => setDate(new Date()), 1000);\n  }, []);\n  return <Clock value={date} />;\n};\n\nexport default CustomClock;\n","import React from \"react\";\nimport Calendar from \"react-calendar\";\n\ninterface CustomCalenderProps {\n  calenderValue: Date;\n  onCalenderValueChange: (value: any) => void;\n}\n\nconst CustomCalender = ({\n  calenderValue,\n  onCalenderValueChange,\n}: CustomCalenderProps): JSX.Element => (\n  <Calendar value={calenderValue} onChange={onCalenderValueChange} />\n);\nexport default CustomCalender;\n","import React from \"react\";\n\ninterface PaginationProps {\n  pageNumber: number;\n  usersPerPage: number;\n  totalUsers: number;\n  paginate: (number: number) => void;\n}\nconst Pagination = ({\n  pageNumber,\n  usersPerPage,\n  totalUsers,\n  paginate,\n}: PaginationProps) => {\n  const pageNumbers = [];\n\n  for (let i = 1; i <= Math.ceil(totalUsers / usersPerPage); i++) {\n    pageNumbers.push(i);\n  }\n  return (\n    <nav>\n      <ul className=\"pagination\">\n        {pageNumbers.map((number: number) => (\n          <li\n            key={number}\n            className={\n              number === pageNumber\n                ? \"page-item active cursor-pointer\"\n                : \"page-item cursor-pointer\"\n            }\n          >\n            <a onClick={() => paginate(number)} className=\"page-link\">\n              <b>{number}</b>\n            </a>\n          </li>\n        ))}\n      </ul>\n    </nav>\n  );\n};\n\nexport default Pagination;\n","import React from \"react\";\nimport \"react-calendar/dist/Calendar.css\";\n\nimport { UserList, CustomClock } from \"./components\";\n\nimport \"./App.css\";\n\nfunction App(): JSX.Element {\n  return (\n    <div className=\"container\">\n      <div className=\"d-flex align-items-center justify-content-center my-2\">\n        <h1 className=\"text-center mr-4 text-info\">\n          List of users and their activity\n        </h1>\n        <CustomClock />\n      </div>\n      <UserList></UserList>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}